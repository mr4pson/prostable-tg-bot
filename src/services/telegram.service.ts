import { Injectable } from '@nestjs/common';
import { Types } from 'mongoose';
import {
  calculateEmissionMultiplier,
  CurrencyType,
  formatNumber,
  PullTransactionType,
  TransactionType,
} from 'src/common';
import { Markup, Telegraf } from 'telegraf';
import { BlockchainService } from './blockchain.service';
import { MoralisService } from './moralis.service';
import { PullTransactionService } from './pull-transaction.service';
import { TgMenuService } from './tg-menu.service';
import { TransactionService } from './transaction.service';
import { UserService } from './user.service';

@Injectable()
export class TelegramService {
  private bot: Telegraf<any>;
  private userStates = new Map();
  private userDataMap = new Map();

  constructor(
    private userService: UserService,
    private blockchainService: BlockchainService,
    private tgMenuService: TgMenuService,
    private moralisService: MoralisService,
    private transactionService: TransactionService,
    private pullTransactionService: PullTransactionService,
  ) {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN ?? '');
    this.setupHandlers();
    this.bot.launch();
  }

  private setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞
    this.bot.start(async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);

      this.userStates.delete(ctx.from.id); // Reset state
      this.userDataMap.delete(ctx.from.id);

      if (user && user.publicKey) {
        await this.tgMenuService.setupMainMenu(ctx);

        return;
      }

      const referrer = await this.userService.findUserByTgId(
        Number(ctx.payload),
      );

      if (referrer) {
        await this.userService.createOrUpdateUser({
          tgUserId: ctx.from.id,
          username: ctx.from.username,
          referrer: new Types.ObjectId(referrer.id),
        });

        ctx.replyWithMarkdown(
          `*üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ProStable!
  
  –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
  
  https://docs.google.com/document/d/1fIFLBVIdLpM6TPeQg8SaA_ITBGtMERmRQ_u3wC-HIIE/edit?usp=drivesdk*`,
          Markup.inlineKeyboard([
            Markup.button.callback('–î–∞, –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è', 'accept_terms'),
            Markup.button.callback(
              '–ù–µ—Ç, –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—Å–ª–æ–≤–∏–π',
              'decline_terms',
            ),
          ]),
        );

        return;
      }

      ctx.replyWithMarkdown(
        `*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ ProStable –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—â–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤—ã–¥–∞—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.*`,
      );
    });

    this.handleMainMenuButtons();
    this.handleBalanceTopupButtons();
    this.handlePaymentsBalanceButtons();
    this.handleTextInput();
    this.handleRegistrationButtons();
  }

  private async handleTextInput() {
    this.bot.on('text', async (ctx) => {
      const tgUserId = ctx.from.id;

      if (this.userStates.get(tgUserId) === 'registration') {
        await this.handleRegistration(ctx);
        this.userStates.delete(tgUserId);

        return;
      }

      if (this.userStates.get(tgUserId) === 'send_usdt_username_input') {
        const user = await this.userService.findUserByTgId(ctx.from.id);
        const username = ctx.message.text.replace('@', '');
        const receiver = await this.userService.findUserByUsername(username);

        if (!receiver) {
          ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');

          return;
        }

        ctx.replyWithMarkdown(`
*–í–∞—à –±–∞–ª–∞–Ω—Å USDT: ${user.walletBalance}*,
–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDT,
–∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *@${username}*
        `);

        this.userStates.set(tgUserId, 'send_usdt_amount_input');
        this.userDataMap.set(tgUserId, {
          username,
        });
      }

      const amount = Number(ctx.message.text);

      if (
        this.userStates.get(tgUserId) === 'send_usdt_amount_input' &&
        Number.isInteger(amount)
      ) {
        const user = await this.userService.findUserByTgId(ctx.from.id);
        const userData = this.userDataMap.get(tgUserId);

        if (user.walletBalance < amount) {
          ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.');

          return;
        }

        ctx.reply(
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ ${amount} USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @${userData.username}`,
          Markup.inlineKeyboard([
            Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'accept_send_usdt'),
            Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', 'decline_send_usdt'),
          ]),
        );

        this.userDataMap.set(tgUserId, {
          ...userData,
          amount,
        });
      }

      if (
        this.userStates.get(tgUserId) === 'invest' &&
        Number.isInteger(amount)
      ) {
        const user = await this.userService.findUserByTgId(ctx.from.id);
        const techUser = await this.userService.findUserByTgId(
          Number(process.env.TECH_ACC_TG_ID),
        );

        // if (amount < 100) {
        //   ctx.reply('–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 100 USDT.');

        //   return;
        // }

        if (user.walletBalance < amount) {
          ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.');

          return;
        }

        ctx.replyWithMarkdown(
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ —Ç–æ–∫–µ–Ω *ROST* –Ω–∞ *${amount} USDT* , –∫—É—Ä—Å *1 ROST = ${calculateEmissionMultiplier(techUser.rostBalance)} USDT*. –í—ã –ø–æ–ª—É—á–∏—Ç–µ *${amount} ROST* –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`,
          Markup.inlineKeyboard([
            Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'accept_invest'),
            Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', 'decline_invest'),
          ]),
        );

        this.userStates.set(tgUserId, amount);
      }

      if (
        this.userStates.get(tgUserId) === 'reinvest' &&
        Number.isInteger(amount)
      ) {
        const user = await this.userService.findUserByTgId(ctx.from.id);

        // if (amount < 100) {
        //   ctx.reply('–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 100 ROST.');

        //   return;
        // }

        if (user.rostBalance < amount) {
          ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.');

          return;
        }

        ctx.replyWithMarkdown(
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ *${amount} ROST*`,
          Markup.inlineKeyboard([
            Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'accept_reinvest'),
            Markup.button.callback('–û—Ç–∫–∞–∑–∞—Ç—å—Å—è', 'decline_reinvest'),
          ]),
        );

        this.userDataMap.set(tgUserId, { amount });
      }
    });
  }

  private async handleRegistration(ctx) {
    if (ctx.message.text.includes('@')) {
      await this.userService.updateEmail(ctx.from.id, ctx.message.text);
      await ctx.replyWithMarkdown(
        `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: https://t.me/+6hsWt7xrH5w0ZTY6`,
        Markup.inlineKeyboard([
          Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'check_subscription'),
        ]),
      );
    }
  }

  private handleMainMenuButtons() {
    this.bot.hears('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
      await this.tgMenuService.setupMainMenu(ctx);
    });

    this.bot.hears('–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);

      this.tgMenuService.setupBalanceTopupMenu(ctx, user?.walletBalance);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    this.bot.hears('–ë–∞–ª–∞–Ω—Å ROST', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);

      this.tgMenuService.setupROSTBalanceMenu(ctx, user?.rostBalance);
    });
    this.bot.hears('–ë–∞–ª–∞–Ω—Å –≤—ã–ø–ª–∞—Ç', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);

      await this.tgMenuService.setupPaymentsBalanceMenu(ctx, user);
    });
    this.bot.hears('–ü–æ–¥–¥–µ—Ä–∂–∫–∞', (ctx) => {
      ctx.reply('You selected Option 1');
    });
    this.bot.hears('F.A.Q', (ctx) => {
      ctx.reply('You selected Option 2');
    });
    this.bot.hears('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', async (ctx) => {
      const tgUserId = ctx.from.id;
      const user = await this.userService.findUserByTgId(tgUserId);
      const referralsInfo = await this.userService.getReferralCounts(tgUserId);

      this.tgMenuService.setupReferralsMenu(ctx, user, referralsInfo);
    });
  }

  private handleBalanceTopupButtons() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    this.bot.hears('–ü–æ–ø–æ–ª–Ω–∏—Ç—å USDT', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);

      ctx.reply(user.publicKey);
      ctx.reply(`
        –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ USDT —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ç–∏ BNB Smart Chain (USDT bep20)
      `);
      await this.moralisService.addStream(
        user.publicKey,
        '/transactions/wallet-topup-webhook',
      );
    });
    this.bot.hears('–û—Ç–ø—Ä–∞–≤–∏—Ç—å USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', (ctx) => {
      ctx.reply(`–î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ USDT —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ ProStable.
–ü—Ä–∏–º–µ—Ä: @ProStable`);

      this.userStates.set(ctx.from.id, 'send_usdt_username_input');
    });
    this.bot.hears('–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);

      ctx.replyWithMarkdown(
        `–í–∞—à –±–∞–ª–∞–Ω—Å *${user.walletBalance} USDT* , –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ *USDT* –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω *ROST*.

      –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è *100 USDT*.
      –í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:

      *50%* - –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–æ–∫–µ–Ω–∞—Ö ROST –≤ –ü–£–õ –ë–ò–ó–ù–ï–° –∏ –±—É–¥—É—Ç –ø—Ä–∏—É–º–Ω–æ–∂–µ–Ω—ã –í–∞–º –Ω–∞–∑–∞–¥ –≤ 5-—Ç–∏ –∫—Ä–∞—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¶–û–î –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ 02.2026 –≥–æ–¥–∞

      *40%* - –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã  –≤ —Ç–æ–∫–µ–Ω–∞—Ö ROST –≤ –ü–£–õ –ö–ê–°–°–ê –∏ –∑–∞—Ç–µ–º –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ä–∞–≤–Ω—ã—Ö –¥–æ–ª—è—Ö –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

      *10%* - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
      `,
      );

      this.userStates.set(ctx.from.id, 'invest');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π –∏–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.action('accept_invest', async (ctx) => {
      const tgUserId = ctx.from.id;
      const user = await this.userService.findUserByTgId(tgUserId);
      const techUser = await this.userService.findUserByTgId(
        Number(process.env.TECH_ACC_TG_ID),
      );
      const amount = this.userStates.get(tgUserId);

      const trx = await this.blockchainService.handleDeposit(
        user.privateKey,
        amount,
      );

      const transaction = await this.transactionService.create({
        user: new Types.ObjectId(user._id as string),
        type: TransactionType.INVEST,
        price: amount,
        currencyType: CurrencyType.USDT,
      });

      if (!trx || !transaction) {
        await ctx.replyWithMarkdown(
          '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
          Markup.keyboard(['–ë–∞–ª–∞–Ω—Å ROST']).resize(),
        );

        return;
      }

      const businessPullTransaction = await this.pullTransactionService.create({
        origin: new Types.ObjectId(transaction._id),
        type: PullTransactionType.BUSINESS,
        price: amount / calculateEmissionMultiplier(techUser.rostBalance) / 2,
        currencyType: CurrencyType.ROST,
      });

      const cashboxPullTransaction = await this.pullTransactionService.create({
        origin: new Types.ObjectId(transaction._id),
        type: PullTransactionType.CASH_BOX,
        price:
          (amount / calculateEmissionMultiplier(techUser.rostBalance)) * 0.4,
        currencyType: CurrencyType.ROST,
      });
      const referralValue =
        (amount / calculateEmissionMultiplier(techUser.rostBalance)) * 0.1;
      const referralPullTransaction = await this.pullTransactionService.create({
        type: PullTransactionType.REFERRAL,
        price: referralValue,
        currencyType: CurrencyType.ROST,
      });

      const userReferrals = await this.userService.getUserReferrals(tgUserId);

      for (const [levelName, userIds] of Object.entries(userReferrals)) {
        for (const userId of userIds) {
          const curUser = await this.userService.findUserById(userId);
          const usersCount = userIds.length ?? 1;
          const curReferralValue =
            levelName === 'level1'
              ? (referralValue * 0.7) / usersCount
              : levelName === 'level2'
                ? (referralValue * 0.2) / usersCount
                : (referralValue * 0.1) / usersCount;

          await this.userService.updateUser(curUser.tgUserId, {
            rostBalance: curUser.rostBalance + curReferralValue,
          });
        }
      }

      await this.userService.updateUser(tgUserId, {
        rostBalance: user.rostBalance + amount,
        walletBalance: user.walletBalance - amount,
      });
      await this.userService.updateUser(Number(process.env.TECH_ACC_TG_ID), {
        rostBalance:
          techUser.rostBalance -
          amount / calculateEmissionMultiplier(techUser.rostBalance),
      });
      console.log(trx);

      await ctx.replyWithMarkdown(
        '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –≤–∞—à *ROST* –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ *–ë–∞–ª–∞–Ω—Å ROST* –∏ –∑–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        Markup.keyboard(['–ë–∞–ª–∞–Ω—Å ROST']).resize(),
      );

      this.userStates.delete(tgUserId);

      await this.tgMenuService.setupMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –∏–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.action('decline_invest', async (ctx) => {
      await ctx.reply(
        '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ ROST –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"',
      );

      this.userStates.delete(ctx.from.id);

      await this.tgMenuService.setupMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT
    this.bot.action('accept_send_usdt', async (ctx) => {
      const tgUserId = ctx.from.id;
      const user = await this.userService.findUserByTgId(tgUserId);
      const userData = this.userDataMap.get(tgUserId);
      const receiver = await this.userService.findUserByUsername(
        userData.username,
      );

      if (!receiver) {
        await ctx.replyWithMarkdown(
          `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`,
          Markup.keyboard(['–ë–∞–ª–∞–Ω—Å –≤—ã–ø–ª–∞—Ç']).resize(),
        );

        return;
      }

      await ctx.replyWithMarkdown(
        `–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...`,
      );

      await this.moralisService.addStream(
        user.publicKey,
        '/transactions/usdt-transfer-webhook',
      );

      await this.blockchainService.handleSendTransfer(
        user.privateKey,
        receiver.publicKey,
        userData.amount,
      );

      this.userStates.delete(tgUserId);
      this.userDataMap.delete(tgUserId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT
    this.bot.action('decline_send_usdt', async (ctx) => {
      this.userStates.delete(ctx.from.id);
      this.userDataMap.delete(ctx.from.id);

      await this.tgMenuService.setupMainMenu(ctx);
    });
  }

  private handlePaymentsBalanceButtons() {
    this.bot.hears('–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);

      ctx.reply(`
–í–∞—à –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å *${user.rostBalance} ROST*, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ *ROST* –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è *100 ROST*.
–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:

*50%* - –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–æ–∫–µ–Ω–∞—Ö ROST –≤ –ü–£–õ –ë–ò–ó–ù–ï–° –∏ –±—É–¥—É—Ç –ø—Ä–∏—É–º–Ω–æ–∂–µ–Ω—ã –í–∞–º –Ω–∞–∑–∞–¥ –≤ 5-—Ç–∏ –∫—Ä–∞—Ç–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¶–û–î –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ 02.2026 –≥–æ–¥–∞ 

*40%* - –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã  –≤ —Ç–æ–∫–µ–Ω–∞—Ö ROST –≤ –ü–£–õ –ö–ê–°–°–ê –∏ –∑–∞—Ç–µ–º –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ä–∞–≤–Ω—ã—Ö –¥–æ–ª—è—Ö –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ 

*10%* - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
        `);

      this.userStates.set(ctx.from.id, 'reinvest');
    });
    this.bot.hears('–û–±–º–µ–Ω ROST USDT', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);
    });
    this.bot.hears('–í—ã–≤–æ–¥ USDT', async (ctx) => {
      const user = await this.userService.findUserByTgId(ctx.from.id);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π –∏–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.action('accept_reinvest', async (ctx) => {
      const tgUserId = ctx.from.id;
      let user = await this.userService.findUserByTgId(tgUserId);
      const { amount } = this.userDataMap.get(tgUserId);

      const transaction = await this.transactionService.create({
        user: new Types.ObjectId(user._id as string),
        type: TransactionType.REINVEST,
        price: amount,
        currencyType: CurrencyType.ROST,
      });

      if (!transaction) {
        await ctx.replyWithMarkdown(
          '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
          Markup.keyboard(['–ë–∞–ª–∞–Ω—Å –≤—ã–ø–ª–∞—Ç']).resize(),
        );

        return;
      }

      user = await this.userService.updateUser(tgUserId, {
        rostBalance: user.rostBalance - amount,
      });

      await ctx.replyWithMarkdown(
        '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –≤–∞—à *ROST* –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ *–ë–∞–ª–∞–Ω—Å ROST* –∏ –∑–∞–ø—É—â–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        Markup.keyboard(['–ë–∞–ª–∞–Ω—Å ROST']).resize(),
      );

      this.userStates.delete(tgUserId);
      this.userDataMap.delete(tgUserId);

      await this.tgMenuService.setupPaymentsBalanceMenu(ctx, user);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –∏–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.bot.action('decline_reinvest', async (ctx) => {
      await ctx.reply(
        '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ ROST –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"',
      );

      this.userStates.delete(ctx.from.id);

      await this.tgMenuService.setupMainMenu(ctx);
    });
  }

  private handleRegistrationButtons() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —É—Å–ª–æ–≤–∏–π
    this.bot.action('accept_terms', async (ctx) => {
      await this.userService.createOrUpdateUser({
        tgUserId: ctx.from.id,
        acceptedTerms: true,
      });

      await ctx.replyWithMarkdown(
        `–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –º—ã —Å–æ–∑–¥–∞–¥–∏–º –≤–∞–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫, –æ–Ω –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –∏ —Ä–∞–±–æ—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã`,

        Markup.inlineKeyboard([
          Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'continue_registration'),
        ]),
      );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    this.bot.action('continue_registration', async (ctx) => {
      const wallet = this.blockchainService.generateWallet();
      const tgUserId = ctx.from.id;

      await this.userService.createOrUpdateUser({
        tgUserId: tgUserId,
        privateKey: wallet.privateKey,
        publicKey: wallet.publicKey,
      });

      await ctx.reply(
        `–í–∞–º —Å–æ–∑–¥–∞–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ—à–µ–ª–µ–∫, –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–ª–æ–∫—á–µ–π–Ω—É BNB Smart Chain (—Ç–æ–∫–µ–Ω—ã BEP20), –∞–¥—Ä–µ—Å –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:`,
        {
          parse_mode: 'Markdown',
        },
      );
      await ctx.reply(`${wallet.publicKey}`, {
        parse_mode: 'Markdown',
      });
      await ctx.reply(
        '–¢–µ–ø–µ—Ä—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å e-mail',
      );

      this.userStates.set(tgUserId, 'registration');
    });

    this.bot.action('check_subscription', async (ctx) => {
      // const chatId = '-1002113804394';
      // const chatMember = await this.bot.telegram.getChatMember(
      //   chatId,
      //   ctx.from.id,
      // );

      // const isChatMember = ['member', 'administrator', 'creator'].includes(
      //   chatMember?.status,
      // );

      // if (!isChatMember) {
      // await ctx.replyWithMarkdown(
      //   `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: https://t.me/+6hsWt7xrH5w0ZTY6`,
      //   Markup.inlineKeyboard([
      //     Markup.button.callback('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'check_subscription'),
      //   ]),
      // );

      // return;
      // }

      await ctx.replyWithMarkdown(
        `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
*"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"*`,
      );

      await this.tgMenuService.setupMainMenu(ctx);
    });
  }

  public async setupMainMenuExternally(tgUserId: number) {
    const techUser = await this.userService.findUserByTgId(
      Number(process.env.TECH_ACC_TG_ID),
    );
    const rostHoldersNumber = await this.userService.getRostHoldersNumber();
    const nextRateRaseNumber = await this.userService.getNextRateRaseNumber();

    this.bot.telegram.sendMessage(
      tgUserId,
      `
üíπ –ö—É—Ä—Å: 1 ROST = ${calculateEmissionMultiplier(techUser.rostBalance)} USDT
  
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–º–∏—Å—Å–∏—è: ${formatNumber(process.env.MAX_EMISSION_VALUE)} ROST

–î–æ —Å–ª–µ–¥—É—é–µ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å: ${formatNumber(nextRateRaseNumber)} ROST

–°–æ–∂–∂–µ–Ω–æ: 0 ROST

–í—Å–µ–≥–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π ROST: *${rostHoldersNumber}*
        `,
      {
        reply_markup: {
          keyboard: [
            // Each inner array represents a row of buttons
            [
              { text: '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è' },
              { text: '–ë–∞–ª–∞–Ω—Å ROST' },
              { text: '–ë–∞–ª–∞–Ω—Å –≤—ã–ø–ª–∞—Ç' },
            ],
            [
              { text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' },
              { text: 'F.A.Q' },
              { text: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' },
            ],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      },
    );
  }

  public sendExternalBotMessage(tgUserId: number, message: string) {
    this.bot.telegram.sendMessage(tgUserId, message);
  }
}
