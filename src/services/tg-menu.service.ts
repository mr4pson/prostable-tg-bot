import { Injectable } from '@nestjs/common';
import { Types } from 'mongoose';
import {
  calculateBusinessPullRate,
  calculateEmissionMultiplier,
  formatNumber,
  IReferralsInfo,
} from 'src/common';
import { User } from 'src/schemas';
import { Context } from 'telegraf';
import { PullTransactionService } from './pull-transaction.service';
import { TransactionService } from './transaction.service';
import { UserService } from './user.service';

@Injectable()
export class TgMenuService {
  constructor(
    private userService: UserService,
    private transactionService: TransactionService,
    private pullTransactionService: PullTransactionService,
  ) {}
  public async setupMainMenu(ctx: Context) {
    const techUser = await this.userService.findUserByTgId(
      Number(process.env.TECH_ACC_TG_ID),
    );
    const rostHoldersNumber = await this.userService.getRostHoldersNumber();
    const nextRateRaseNumber = await this.userService.getNextRateRaseNumber();

    ctx.replyWithMarkdown(
      `
üíπ –ö—É—Ä—Å: *1 ROST = ${calculateEmissionMultiplier(techUser.rostBalance)} USDT*

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–º–∏—Å—Å–∏—è: *${formatNumber(process.env.MAX_EMISSION_VALUE)} ROST*

–î–æ —Å–ª–µ–¥—É—é–µ–≥–æ –ø–æ–≤—ã—à–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å: *${formatNumber(Math.floor(nextRateRaseNumber))} ROST*

–°–æ–∂–∂–µ–Ω–æ: *0 ROST*

–í—Å–µ–≥–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π ROST: *${rostHoldersNumber}*
      `,
      {
        reply_markup: {
          keyboard: [
            // Each inner array represents a row of buttons
            [
              { text: '–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è' },
              { text: '–ë–∞–ª–∞–Ω—Å ROST' },
              { text: '–ë–∞–ª–∞–Ω—Å –≤—ã–ø–ª–∞—Ç' },
            ],
            [
              { text: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' },
              { text: 'F.A.Q' },
              { text: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞' },
            ],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      },
    );
  }

  public setupBalanceTopupMenu(ctx: Context, walletBalance: number) {
    ctx.replyWithMarkdown(
      `–≠—Ç–æ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç USDT, –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –∞ —Ç–∞–∫ –∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–æ—Ç–∞. –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: *–ü–æ–ø–æ–ª–Ω–∏—Ç—å USDT*

*–í–∞—à –±–∞–ª–∞–Ω—Å USDT: ${Math.floor(walletBalance)}*`,
      {
        reply_markup: {
          keyboard: [
            [
              { text: '–ü–æ–ø–æ–ª–Ω–∏—Ç—å USDT' },
              { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' },
              { text: '–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å' },
            ],
            [{ text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      },
    );
  }

  async setupROSTBalanceMenu(ctx: Context) {
    const user = await this.userService.findUserByTgId(ctx.from.id);
    const techUser = await this.userService.findUserByTgId(
      Number(process.env.TECH_ACC_TG_ID),
    );
    const groupVolume = await this.userService.getGroupVolume(ctx.from.id);
    const businessPullSum = Math.floor(
      await this.pullTransactionService.getUserBusinessPullSum(
        new Types.ObjectId(user?._id as string),
      ),
    );

    const emissionMultiplier = calculateEmissionMultiplier(
      techUser?.rostBalance,
    );
    const groupVolumeBonusRemainingValue = 50_000 - groupVolume;
    const businessPullRate = calculateBusinessPullRate(businessPullSum);
    const businessPullBonusRemaining = businessPullRate.limit - businessPullSum;

    ctx.replyWithMarkdown(
      `
*–õ–∏—á–Ω—ã–π –æ–±—ä–µ–º:*

–ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤ –ü–£–õ –ë–ò–ó–ù–ï–°: *${Math.floor(businessPullSum)} ROST = ${Math.floor(businessPullSum * emissionMultiplier)} USDT*

–í–∞—à–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∏—Ç *—Ö${businessPullRate.rate} = ${Math.floor(businessPullSum * businessPullRate.rate)} USDT*

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å –µ—â—ë ${Math.round(businessPullBonusRemaining)} USDT –≤ –ü—É–ª–µ –ë–∏–∑–Ω–µ—Å

*–ì—Ä—É–ø–ø–æ–≤–æ–π –æ–±—ä–µ–º: ${Math.floor(groupVolume)} ROST = ${Math.floor(groupVolume * emissionMultiplier)} USDT*

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –õ–∏–¥–µ—Ä—Å–∫–æ–≥–æ –ë–æ–Ω—É—Å–∞ 1 –í–¢–° 
–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å ${groupVolumeBonusRemainingValue} USDT –ì—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ–±—ä–µ–º–∞
      `,
      {
        reply_markup: {
          keyboard: [[{ text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      },
    );
  }

  public setupReferralsMenu(
    ctx: Context,
    user: User,
    referralsInfo: IReferralsInfo,
    firstLineActiveReferrals: number,
  ) {
    ctx.replyWithMarkdown(
      `
–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:

‚Ä¢ https://t.me/prostablebot?start=${user.tgUserId}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1 —É—Ä–æ–≤–Ω—è - *${referralsInfo.level1} —á–µ–ª–æ–≤–µ–∫*,
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2 —É—Ä–æ–≤–Ω—è - *${referralsInfo.level2} —á–µ–ª–æ–≤–µ–∫*,
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 3 —É—Ä–æ–≤–Ω—è - *${referralsInfo.level3} —á–µ–ª–æ–≤–µ–∫*

–í–∞—à–∏—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ 
(—Ç–µ –∫—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –Ω–µ –º–µ–Ω–µ–µ 100 USDT) 
–≤ 1 –ª–∏–Ω–∏–∏ - *${firstLineActiveReferrals} —á–µ–ª–æ–≤–µ–∫*
`,
      {
        reply_markup: {
          keyboard: [[{ text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      },
    );
  }

  public async setupPaymentsBalanceMenu(ctx: Context, user: User) {
    const techUser = await this.userService.findUserByTgId(
      Number(process.env.TECH_ACC_TG_ID),
    );
    const emissionMultiplier = calculateEmissionMultiplier(
      techUser?.rostBalance,
    );
    const userInvestSum = await this.transactionService.getUserInvestSum(
      new Types.ObjectId(user?._id as string),
    );
    const userReinvestSum = await this.transactionService.getUserReInvestSum(
      new Types.ObjectId(user?._id as string),
    );
    const cashboxPullTopupSum =
      await this.pullTransactionService.getUserCashboxTopupSum(
        new Types.ObjectId(user?._id as string),
      );
    const referralSum = await this.pullTransactionService.getUserReferralSum(
      new Types.ObjectId(user?._id as string),
    );
    const swapSum = await this.transactionService.getUserSwapSum(
      new Types.ObjectId(user?._id as string),
    );

    ctx.replyWithMarkdown(
      `
–í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *${Math.floor(userInvestSum)} USDT = ${Math.floor(userInvestSum * emissionMultiplier)} ROST*

–í—Å–µ–≥–æ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: *${Math.floor(userReinvestSum)} ROST*

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: *${Math.floor(user.rostBalance)} ROST*

–í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –∏–∑ –ü–£–õ –ö–ê–°–°–ê: *${Math.floor(cashboxPullTopupSum)} ROST = ${Math.floor(cashboxPullTopupSum * emissionMultiplier)} USDT*

–í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö: *${Math.floor(referralSum)} ROST = ${Math.floor(referralSum * emissionMultiplier)} USDT*

–í—Å–µ–≥–æ –æ–±–º–µ–Ω–µ–Ω–æ *ROST* –Ω–∞ *USDT*: *${swapSum}*

–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT –¥–ª—è –≤—ã–≤–æ–¥–∞: *0*

–í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: *0 USDT*
      `,
      {
        reply_markup: {
          keyboard: [
            [
              { text: '–†–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å' },
              { text: '–û–±–º–µ–Ω ROST USDT' },
              { text: '–í—ã–≤–æ–¥ USDT' },
            ],
            [{ text: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }, { text: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏' }],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      },
    );
  }
}
